// This file was generated by counterfeiter
package netstatfakes

import (
	"sync"

	"github.com/bo0mer/yamt/netstat"
)

type FakeInterfaceStatReader struct {
	ReadStatsStub        func() ([]netstat.IfStat, error)
	readStatsMutex       sync.RWMutex
	readStatsArgsForCall []struct{}
	readStatsReturns     struct {
		result1 []netstat.IfStat
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterfaceStatReader) ReadStats() ([]netstat.IfStat, error) {
	fake.readStatsMutex.Lock()
	fake.readStatsArgsForCall = append(fake.readStatsArgsForCall, struct{}{})
	fake.recordInvocation("ReadStats", []interface{}{})
	fake.readStatsMutex.Unlock()
	if fake.ReadStatsStub != nil {
		return fake.ReadStatsStub()
	} else {
		return fake.readStatsReturns.result1, fake.readStatsReturns.result2
	}
}

func (fake *FakeInterfaceStatReader) ReadStatsCallCount() int {
	fake.readStatsMutex.RLock()
	defer fake.readStatsMutex.RUnlock()
	return len(fake.readStatsArgsForCall)
}

func (fake *FakeInterfaceStatReader) ReadStatsReturns(result1 []netstat.IfStat, result2 error) {
	fake.ReadStatsStub = nil
	fake.readStatsReturns = struct {
		result1 []netstat.IfStat
		result2 error
	}{result1, result2}
}

func (fake *FakeInterfaceStatReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readStatsMutex.RLock()
	defer fake.readStatsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInterfaceStatReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ netstat.InterfaceStatReader = new(FakeInterfaceStatReader)
